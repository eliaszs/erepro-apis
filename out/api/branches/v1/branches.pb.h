// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/branches/v1/branches.proto

#ifndef PROTOBUF_INCLUDED_api_2fbranches_2fv1_2fbranches_2eproto
#define PROTOBUF_INCLUDED_api_2fbranches_2fv1_2fbranches_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2fbranches_2fv1_2fbranches_2eproto 

namespace protobuf_api_2fbranches_2fv1_2fbranches_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2fbranches_2fv1_2fbranches_2eproto
namespace erepro {
namespace api {
namespace branches {
namespace v1 {
class Branch;
class BranchDefaultTypeInternal;
extern BranchDefaultTypeInternal _Branch_default_instance_;
class BrancheOperation;
class BrancheOperationDefaultTypeInternal;
extern BrancheOperationDefaultTypeInternal _BrancheOperation_default_instance_;
class CreateBranchRequest;
class CreateBranchRequestDefaultTypeInternal;
extern CreateBranchRequestDefaultTypeInternal _CreateBranchRequest_default_instance_;
class DeleteBranchRequest;
class DeleteBranchRequestDefaultTypeInternal;
extern DeleteBranchRequestDefaultTypeInternal _DeleteBranchRequest_default_instance_;
class GetBranchRequest;
class GetBranchRequestDefaultTypeInternal;
extern GetBranchRequestDefaultTypeInternal _GetBranchRequest_default_instance_;
class ListBranchesRequest;
class ListBranchesRequestDefaultTypeInternal;
extern ListBranchesRequestDefaultTypeInternal _ListBranchesRequest_default_instance_;
class ListBranchesResponse;
class ListBranchesResponseDefaultTypeInternal;
extern ListBranchesResponseDefaultTypeInternal _ListBranchesResponse_default_instance_;
class SearchBranchesRequest;
class SearchBranchesRequestDefaultTypeInternal;
extern SearchBranchesRequestDefaultTypeInternal _SearchBranchesRequest_default_instance_;
class SearchBranchesResponse;
class SearchBranchesResponseDefaultTypeInternal;
extern SearchBranchesResponseDefaultTypeInternal _SearchBranchesResponse_default_instance_;
class UpdateBranchRequest;
class UpdateBranchRequestDefaultTypeInternal;
extern UpdateBranchRequestDefaultTypeInternal _UpdateBranchRequest_default_instance_;
}  // namespace v1
}  // namespace branches
}  // namespace api
}  // namespace erepro
namespace google {
namespace protobuf {
template<> ::erepro::api::branches::v1::Branch* Arena::CreateMaybeMessage<::erepro::api::branches::v1::Branch>(Arena*);
template<> ::erepro::api::branches::v1::BrancheOperation* Arena::CreateMaybeMessage<::erepro::api::branches::v1::BrancheOperation>(Arena*);
template<> ::erepro::api::branches::v1::CreateBranchRequest* Arena::CreateMaybeMessage<::erepro::api::branches::v1::CreateBranchRequest>(Arena*);
template<> ::erepro::api::branches::v1::DeleteBranchRequest* Arena::CreateMaybeMessage<::erepro::api::branches::v1::DeleteBranchRequest>(Arena*);
template<> ::erepro::api::branches::v1::GetBranchRequest* Arena::CreateMaybeMessage<::erepro::api::branches::v1::GetBranchRequest>(Arena*);
template<> ::erepro::api::branches::v1::ListBranchesRequest* Arena::CreateMaybeMessage<::erepro::api::branches::v1::ListBranchesRequest>(Arena*);
template<> ::erepro::api::branches::v1::ListBranchesResponse* Arena::CreateMaybeMessage<::erepro::api::branches::v1::ListBranchesResponse>(Arena*);
template<> ::erepro::api::branches::v1::SearchBranchesRequest* Arena::CreateMaybeMessage<::erepro::api::branches::v1::SearchBranchesRequest>(Arena*);
template<> ::erepro::api::branches::v1::SearchBranchesResponse* Arena::CreateMaybeMessage<::erepro::api::branches::v1::SearchBranchesResponse>(Arena*);
template<> ::erepro::api::branches::v1::UpdateBranchRequest* Arena::CreateMaybeMessage<::erepro::api::branches::v1::UpdateBranchRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace erepro {
namespace api {
namespace branches {
namespace v1 {

enum BrancheOperation_OperationType {
  BrancheOperation_OperationType_OPERATION_TYPE_UNSPECIFIED = 0,
  BrancheOperation_OperationType_CREATE = 1,
  BrancheOperation_OperationType_BrancheOperation_OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BrancheOperation_OperationType_BrancheOperation_OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BrancheOperation_OperationType_IsValid(int value);
const BrancheOperation_OperationType BrancheOperation_OperationType_OperationType_MIN = BrancheOperation_OperationType_OPERATION_TYPE_UNSPECIFIED;
const BrancheOperation_OperationType BrancheOperation_OperationType_OperationType_MAX = BrancheOperation_OperationType_CREATE;
const int BrancheOperation_OperationType_OperationType_ARRAYSIZE = BrancheOperation_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BrancheOperation_OperationType_descriptor();
inline const ::std::string& BrancheOperation_OperationType_Name(BrancheOperation_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BrancheOperation_OperationType_descriptor(), value);
}
inline bool BrancheOperation_OperationType_Parse(
    const ::std::string& name, BrancheOperation_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BrancheOperation_OperationType>(
    BrancheOperation_OperationType_descriptor(), name, value);
}
// ===================================================================

class Branch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.Branch) */ {
 public:
  Branch();
  virtual ~Branch();

  Branch(const Branch& from);

  inline Branch& operator=(const Branch& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Branch(Branch&& from) noexcept
    : Branch() {
    *this = ::std::move(from);
  }

  inline Branch& operator=(Branch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Branch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Branch* internal_default_instance() {
    return reinterpret_cast<const Branch*>(
               &_Branch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Branch* other);
  friend void swap(Branch& a, Branch& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Branch* New() const final {
    return CreateMaybeMessage<Branch>(NULL);
  }

  Branch* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Branch>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Branch& from);
  void MergeFrom(const Branch& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Branch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .google.protobuf.Timestamp create_time = 7;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 8;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 no_beds = 4;
  void clear_no_beds();
  static const int kNoBedsFieldNumber = 4;
  ::google::protobuf::uint32 no_beds() const;
  void set_no_beds(::google::protobuf::uint32 value);

  // uint32 no_baths = 5;
  void clear_no_baths();
  static const int kNoBathsFieldNumber = 5;
  ::google::protobuf::uint32 no_baths() const;
  void set_no_baths(::google::protobuf::uint32 value);

  // uint64 price = 6;
  void clear_price();
  static const int kPriceFieldNumber = 6;
  ::google::protobuf::uint64 price() const;
  void set_price(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.Branch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 no_beds_;
  ::google::protobuf::uint32 no_baths_;
  ::google::protobuf::uint64 price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListBranchesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.ListBranchesRequest) */ {
 public:
  ListBranchesRequest();
  virtual ~ListBranchesRequest();

  ListBranchesRequest(const ListBranchesRequest& from);

  inline ListBranchesRequest& operator=(const ListBranchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListBranchesRequest(ListBranchesRequest&& from) noexcept
    : ListBranchesRequest() {
    *this = ::std::move(from);
  }

  inline ListBranchesRequest& operator=(ListBranchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListBranchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListBranchesRequest* internal_default_instance() {
    return reinterpret_cast<const ListBranchesRequest*>(
               &_ListBranchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListBranchesRequest* other);
  friend void swap(ListBranchesRequest& a, ListBranchesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListBranchesRequest* New() const final {
    return CreateMaybeMessage<ListBranchesRequest>(NULL);
  }

  ListBranchesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListBranchesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListBranchesRequest& from);
  void MergeFrom(const ListBranchesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBranchesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 1;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 1;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // bool show_delete = 3;
  void clear_show_delete();
  static const int kShowDeleteFieldNumber = 3;
  bool show_delete() const;
  void set_show_delete(bool value);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.ListBranchesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  bool show_delete_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListBranchesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.ListBranchesResponse) */ {
 public:
  ListBranchesResponse();
  virtual ~ListBranchesResponse();

  ListBranchesResponse(const ListBranchesResponse& from);

  inline ListBranchesResponse& operator=(const ListBranchesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListBranchesResponse(ListBranchesResponse&& from) noexcept
    : ListBranchesResponse() {
    *this = ::std::move(from);
  }

  inline ListBranchesResponse& operator=(ListBranchesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListBranchesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListBranchesResponse* internal_default_instance() {
    return reinterpret_cast<const ListBranchesResponse*>(
               &_ListBranchesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ListBranchesResponse* other);
  friend void swap(ListBranchesResponse& a, ListBranchesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListBranchesResponse* New() const final {
    return CreateMaybeMessage<ListBranchesResponse>(NULL);
  }

  ListBranchesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListBranchesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListBranchesResponse& from);
  void MergeFrom(const ListBranchesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListBranchesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .erepro.api.branches.v1.Branch branches = 1;
  int branches_size() const;
  void clear_branches();
  static const int kBranchesFieldNumber = 1;
  ::erepro::api::branches::v1::Branch* mutable_branches(int index);
  ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch >*
      mutable_branches();
  const ::erepro::api::branches::v1::Branch& branches(int index) const;
  ::erepro::api::branches::v1::Branch* add_branches();
  const ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch >&
      branches() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.ListBranchesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch > branches_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchBranchesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.SearchBranchesRequest) */ {
 public:
  SearchBranchesRequest();
  virtual ~SearchBranchesRequest();

  SearchBranchesRequest(const SearchBranchesRequest& from);

  inline SearchBranchesRequest& operator=(const SearchBranchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchBranchesRequest(SearchBranchesRequest&& from) noexcept
    : SearchBranchesRequest() {
    *this = ::std::move(from);
  }

  inline SearchBranchesRequest& operator=(SearchBranchesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchBranchesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchBranchesRequest* internal_default_instance() {
    return reinterpret_cast<const SearchBranchesRequest*>(
               &_SearchBranchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SearchBranchesRequest* other);
  friend void swap(SearchBranchesRequest& a, SearchBranchesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchBranchesRequest* New() const final {
    return CreateMaybeMessage<SearchBranchesRequest>(NULL);
  }

  SearchBranchesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchBranchesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchBranchesRequest& from);
  void MergeFrom(const SearchBranchesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchBranchesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string query = 3;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // int32 page_size = 1;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 1;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.SearchBranchesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchBranchesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.SearchBranchesResponse) */ {
 public:
  SearchBranchesResponse();
  virtual ~SearchBranchesResponse();

  SearchBranchesResponse(const SearchBranchesResponse& from);

  inline SearchBranchesResponse& operator=(const SearchBranchesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchBranchesResponse(SearchBranchesResponse&& from) noexcept
    : SearchBranchesResponse() {
    *this = ::std::move(from);
  }

  inline SearchBranchesResponse& operator=(SearchBranchesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchBranchesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchBranchesResponse* internal_default_instance() {
    return reinterpret_cast<const SearchBranchesResponse*>(
               &_SearchBranchesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SearchBranchesResponse* other);
  friend void swap(SearchBranchesResponse& a, SearchBranchesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchBranchesResponse* New() const final {
    return CreateMaybeMessage<SearchBranchesResponse>(NULL);
  }

  SearchBranchesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchBranchesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchBranchesResponse& from);
  void MergeFrom(const SearchBranchesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchBranchesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .erepro.api.branches.v1.Branch branches = 1;
  int branches_size() const;
  void clear_branches();
  static const int kBranchesFieldNumber = 1;
  ::erepro::api::branches::v1::Branch* mutable_branches(int index);
  ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch >*
      mutable_branches();
  const ::erepro::api::branches::v1::Branch& branches(int index) const;
  ::erepro::api::branches::v1::Branch* add_branches();
  const ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch >&
      branches() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.SearchBranchesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch > branches_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBranchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.GetBranchRequest) */ {
 public:
  GetBranchRequest();
  virtual ~GetBranchRequest();

  GetBranchRequest(const GetBranchRequest& from);

  inline GetBranchRequest& operator=(const GetBranchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBranchRequest(GetBranchRequest&& from) noexcept
    : GetBranchRequest() {
    *this = ::std::move(from);
  }

  inline GetBranchRequest& operator=(GetBranchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBranchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBranchRequest* internal_default_instance() {
    return reinterpret_cast<const GetBranchRequest*>(
               &_GetBranchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetBranchRequest* other);
  friend void swap(GetBranchRequest& a, GetBranchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBranchRequest* New() const final {
    return CreateMaybeMessage<GetBranchRequest>(NULL);
  }

  GetBranchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBranchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBranchRequest& from);
  void MergeFrom(const GetBranchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBranchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.GetBranchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateBranchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.CreateBranchRequest) */ {
 public:
  CreateBranchRequest();
  virtual ~CreateBranchRequest();

  CreateBranchRequest(const CreateBranchRequest& from);

  inline CreateBranchRequest& operator=(const CreateBranchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateBranchRequest(CreateBranchRequest&& from) noexcept
    : CreateBranchRequest() {
    *this = ::std::move(from);
  }

  inline CreateBranchRequest& operator=(CreateBranchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateBranchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateBranchRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBranchRequest*>(
               &_CreateBranchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CreateBranchRequest* other);
  friend void swap(CreateBranchRequest& a, CreateBranchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateBranchRequest* New() const final {
    return CreateMaybeMessage<CreateBranchRequest>(NULL);
  }

  CreateBranchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateBranchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateBranchRequest& from);
  void MergeFrom(const CreateBranchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBranchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .erepro.api.branches.v1.Branch branch = 1;
  bool has_branch() const;
  void clear_branch();
  static const int kBranchFieldNumber = 1;
  private:
  const ::erepro::api::branches::v1::Branch& _internal_branch() const;
  public:
  const ::erepro::api::branches::v1::Branch& branch() const;
  ::erepro::api::branches::v1::Branch* release_branch();
  ::erepro::api::branches::v1::Branch* mutable_branch();
  void set_allocated_branch(::erepro::api::branches::v1::Branch* branch);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.CreateBranchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::erepro::api::branches::v1::Branch* branch_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateBranchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.UpdateBranchRequest) */ {
 public:
  UpdateBranchRequest();
  virtual ~UpdateBranchRequest();

  UpdateBranchRequest(const UpdateBranchRequest& from);

  inline UpdateBranchRequest& operator=(const UpdateBranchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateBranchRequest(UpdateBranchRequest&& from) noexcept
    : UpdateBranchRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBranchRequest& operator=(UpdateBranchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateBranchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBranchRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBranchRequest*>(
               &_UpdateBranchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UpdateBranchRequest* other);
  friend void swap(UpdateBranchRequest& a, UpdateBranchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateBranchRequest* New() const final {
    return CreateMaybeMessage<UpdateBranchRequest>(NULL);
  }

  UpdateBranchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBranchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateBranchRequest& from);
  void MergeFrom(const UpdateBranchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBranchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .erepro.api.branches.v1.Branch branch = 1;
  bool has_branch() const;
  void clear_branch();
  static const int kBranchFieldNumber = 1;
  private:
  const ::erepro::api::branches::v1::Branch& _internal_branch() const;
  public:
  const ::erepro::api::branches::v1::Branch& branch() const;
  ::erepro::api::branches::v1::Branch* release_branch();
  ::erepro::api::branches::v1::Branch* mutable_branch();
  void set_allocated_branch(::erepro::api::branches::v1::Branch* branch);

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.UpdateBranchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::erepro::api::branches::v1::Branch* branch_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteBranchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.DeleteBranchRequest) */ {
 public:
  DeleteBranchRequest();
  virtual ~DeleteBranchRequest();

  DeleteBranchRequest(const DeleteBranchRequest& from);

  inline DeleteBranchRequest& operator=(const DeleteBranchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteBranchRequest(DeleteBranchRequest&& from) noexcept
    : DeleteBranchRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBranchRequest& operator=(DeleteBranchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteBranchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteBranchRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBranchRequest*>(
               &_DeleteBranchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteBranchRequest* other);
  friend void swap(DeleteBranchRequest& a, DeleteBranchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteBranchRequest* New() const final {
    return CreateMaybeMessage<DeleteBranchRequest>(NULL);
  }

  DeleteBranchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteBranchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteBranchRequest& from);
  void MergeFrom(const DeleteBranchRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBranchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.DeleteBranchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrancheOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.branches.v1.BrancheOperation) */ {
 public:
  BrancheOperation();
  virtual ~BrancheOperation();

  BrancheOperation(const BrancheOperation& from);

  inline BrancheOperation& operator=(const BrancheOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrancheOperation(BrancheOperation&& from) noexcept
    : BrancheOperation() {
    *this = ::std::move(from);
  }

  inline BrancheOperation& operator=(BrancheOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrancheOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrancheOperation* internal_default_instance() {
    return reinterpret_cast<const BrancheOperation*>(
               &_BrancheOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BrancheOperation* other);
  friend void swap(BrancheOperation& a, BrancheOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrancheOperation* New() const final {
    return CreateMaybeMessage<BrancheOperation>(NULL);
  }

  BrancheOperation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BrancheOperation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BrancheOperation& from);
  void MergeFrom(const BrancheOperation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrancheOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BrancheOperation_OperationType OperationType;
  static const OperationType OPERATION_TYPE_UNSPECIFIED =
    BrancheOperation_OperationType_OPERATION_TYPE_UNSPECIFIED;
  static const OperationType CREATE =
    BrancheOperation_OperationType_CREATE;
  static inline bool OperationType_IsValid(int value) {
    return BrancheOperation_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    BrancheOperation_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    BrancheOperation_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    BrancheOperation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return BrancheOperation_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return BrancheOperation_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return BrancheOperation_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // .erepro.api.branches.v1.BrancheOperation.OperationType operation_type = 2;
  void clear_operation_type();
  static const int kOperationTypeFieldNumber = 2;
  ::erepro::api::branches::v1::BrancheOperation_OperationType operation_type() const;
  void set_operation_type(::erepro::api::branches::v1::BrancheOperation_OperationType value);

  // @@protoc_insertion_point(class_scope:erepro.api.branches.v1.BrancheOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  int operation_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2fbranches_2fv1_2fbranches_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Branch

// uint64 id = 1;
inline void Branch::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Branch::id() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.Branch.id)
  return id_;
}
inline void Branch::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.Branch.id)
}

// string name = 2;
inline void Branch::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Branch::name() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.Branch.name)
  return name_.GetNoArena();
}
inline void Branch::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.Branch.name)
}
#if LANG_CXX11
inline void Branch::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.branches.v1.Branch.name)
}
#endif
inline void Branch::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.branches.v1.Branch.name)
}
inline void Branch::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.branches.v1.Branch.name)
}
inline ::std::string* Branch::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.Branch.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Branch::release_name() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.Branch.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Branch::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.Branch.name)
}

// string address = 3;
inline void Branch::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Branch::address() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.Branch.address)
  return address_.GetNoArena();
}
inline void Branch::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.Branch.address)
}
#if LANG_CXX11
inline void Branch::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.branches.v1.Branch.address)
}
#endif
inline void Branch::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.branches.v1.Branch.address)
}
inline void Branch::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.branches.v1.Branch.address)
}
inline ::std::string* Branch::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.Branch.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Branch::release_address() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.Branch.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Branch::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.Branch.address)
}

// uint32 no_beds = 4;
inline void Branch::clear_no_beds() {
  no_beds_ = 0u;
}
inline ::google::protobuf::uint32 Branch::no_beds() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.Branch.no_beds)
  return no_beds_;
}
inline void Branch::set_no_beds(::google::protobuf::uint32 value) {
  
  no_beds_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.Branch.no_beds)
}

// uint32 no_baths = 5;
inline void Branch::clear_no_baths() {
  no_baths_ = 0u;
}
inline ::google::protobuf::uint32 Branch::no_baths() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.Branch.no_baths)
  return no_baths_;
}
inline void Branch::set_no_baths(::google::protobuf::uint32 value) {
  
  no_baths_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.Branch.no_baths)
}

// uint64 price = 6;
inline void Branch::clear_price() {
  price_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Branch::price() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.Branch.price)
  return price_;
}
inline void Branch::set_price(::google::protobuf::uint64 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.Branch.price)
}

// .google.protobuf.Timestamp create_time = 7;
inline bool Branch::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Branch::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Branch::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.Branch.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Branch::release_create_time() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.Branch.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Branch::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.Branch.create_time)
  return create_time_;
}
inline void Branch::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.Branch.create_time)
}

// .google.protobuf.Timestamp update_time = 8;
inline bool Branch::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Branch::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& Branch::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.Branch.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Branch::release_update_time() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.Branch.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Branch::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.Branch.update_time)
  return update_time_;
}
inline void Branch::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.Branch.update_time)
}

// -------------------------------------------------------------------

// ListBranchesRequest

// int32 page_size = 1;
inline void ListBranchesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListBranchesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.ListBranchesRequest.page_size)
  return page_size_;
}
inline void ListBranchesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.ListBranchesRequest.page_size)
}

// string page_token = 2;
inline void ListBranchesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListBranchesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.ListBranchesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListBranchesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.ListBranchesRequest.page_token)
}
#if LANG_CXX11
inline void ListBranchesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.branches.v1.ListBranchesRequest.page_token)
}
#endif
inline void ListBranchesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.branches.v1.ListBranchesRequest.page_token)
}
inline void ListBranchesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.branches.v1.ListBranchesRequest.page_token)
}
inline ::std::string* ListBranchesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.ListBranchesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListBranchesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.ListBranchesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBranchesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.ListBranchesRequest.page_token)
}

// bool show_delete = 3;
inline void ListBranchesRequest::clear_show_delete() {
  show_delete_ = false;
}
inline bool ListBranchesRequest::show_delete() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.ListBranchesRequest.show_delete)
  return show_delete_;
}
inline void ListBranchesRequest::set_show_delete(bool value) {
  
  show_delete_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.ListBranchesRequest.show_delete)
}

// -------------------------------------------------------------------

// ListBranchesResponse

// repeated .erepro.api.branches.v1.Branch branches = 1;
inline int ListBranchesResponse::branches_size() const {
  return branches_.size();
}
inline void ListBranchesResponse::clear_branches() {
  branches_.Clear();
}
inline ::erepro::api::branches::v1::Branch* ListBranchesResponse::mutable_branches(int index) {
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.ListBranchesResponse.branches)
  return branches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch >*
ListBranchesResponse::mutable_branches() {
  // @@protoc_insertion_point(field_mutable_list:erepro.api.branches.v1.ListBranchesResponse.branches)
  return &branches_;
}
inline const ::erepro::api::branches::v1::Branch& ListBranchesResponse::branches(int index) const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.ListBranchesResponse.branches)
  return branches_.Get(index);
}
inline ::erepro::api::branches::v1::Branch* ListBranchesResponse::add_branches() {
  // @@protoc_insertion_point(field_add:erepro.api.branches.v1.ListBranchesResponse.branches)
  return branches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch >&
ListBranchesResponse::branches() const {
  // @@protoc_insertion_point(field_list:erepro.api.branches.v1.ListBranchesResponse.branches)
  return branches_;
}

// string next_page_token = 2;
inline void ListBranchesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListBranchesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.ListBranchesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListBranchesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.ListBranchesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListBranchesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.branches.v1.ListBranchesResponse.next_page_token)
}
#endif
inline void ListBranchesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.branches.v1.ListBranchesResponse.next_page_token)
}
inline void ListBranchesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.branches.v1.ListBranchesResponse.next_page_token)
}
inline ::std::string* ListBranchesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.ListBranchesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListBranchesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.ListBranchesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListBranchesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.ListBranchesResponse.next_page_token)
}

// -------------------------------------------------------------------

// SearchBranchesRequest

// int32 page_size = 1;
inline void SearchBranchesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 SearchBranchesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.SearchBranchesRequest.page_size)
  return page_size_;
}
inline void SearchBranchesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.SearchBranchesRequest.page_size)
}

// string page_token = 2;
inline void SearchBranchesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchBranchesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.SearchBranchesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void SearchBranchesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.SearchBranchesRequest.page_token)
}
#if LANG_CXX11
inline void SearchBranchesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.branches.v1.SearchBranchesRequest.page_token)
}
#endif
inline void SearchBranchesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.branches.v1.SearchBranchesRequest.page_token)
}
inline void SearchBranchesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.branches.v1.SearchBranchesRequest.page_token)
}
inline ::std::string* SearchBranchesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.SearchBranchesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchBranchesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.SearchBranchesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchBranchesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.SearchBranchesRequest.page_token)
}

// string query = 3;
inline void SearchBranchesRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchBranchesRequest::query() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.SearchBranchesRequest.query)
  return query_.GetNoArena();
}
inline void SearchBranchesRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.SearchBranchesRequest.query)
}
#if LANG_CXX11
inline void SearchBranchesRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.branches.v1.SearchBranchesRequest.query)
}
#endif
inline void SearchBranchesRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.branches.v1.SearchBranchesRequest.query)
}
inline void SearchBranchesRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.branches.v1.SearchBranchesRequest.query)
}
inline ::std::string* SearchBranchesRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.SearchBranchesRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchBranchesRequest::release_query() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.SearchBranchesRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchBranchesRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.SearchBranchesRequest.query)
}

// -------------------------------------------------------------------

// SearchBranchesResponse

// repeated .erepro.api.branches.v1.Branch branches = 1;
inline int SearchBranchesResponse::branches_size() const {
  return branches_.size();
}
inline void SearchBranchesResponse::clear_branches() {
  branches_.Clear();
}
inline ::erepro::api::branches::v1::Branch* SearchBranchesResponse::mutable_branches(int index) {
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.SearchBranchesResponse.branches)
  return branches_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch >*
SearchBranchesResponse::mutable_branches() {
  // @@protoc_insertion_point(field_mutable_list:erepro.api.branches.v1.SearchBranchesResponse.branches)
  return &branches_;
}
inline const ::erepro::api::branches::v1::Branch& SearchBranchesResponse::branches(int index) const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.SearchBranchesResponse.branches)
  return branches_.Get(index);
}
inline ::erepro::api::branches::v1::Branch* SearchBranchesResponse::add_branches() {
  // @@protoc_insertion_point(field_add:erepro.api.branches.v1.SearchBranchesResponse.branches)
  return branches_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::erepro::api::branches::v1::Branch >&
SearchBranchesResponse::branches() const {
  // @@protoc_insertion_point(field_list:erepro.api.branches.v1.SearchBranchesResponse.branches)
  return branches_;
}

// string next_page_token = 2;
inline void SearchBranchesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchBranchesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.SearchBranchesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void SearchBranchesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.SearchBranchesResponse.next_page_token)
}
#if LANG_CXX11
inline void SearchBranchesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.branches.v1.SearchBranchesResponse.next_page_token)
}
#endif
inline void SearchBranchesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.branches.v1.SearchBranchesResponse.next_page_token)
}
inline void SearchBranchesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.branches.v1.SearchBranchesResponse.next_page_token)
}
inline ::std::string* SearchBranchesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.SearchBranchesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchBranchesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.SearchBranchesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchBranchesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.SearchBranchesResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetBranchRequest

// uint64 id = 1;
inline void GetBranchRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetBranchRequest::id() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.GetBranchRequest.id)
  return id_;
}
inline void GetBranchRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.GetBranchRequest.id)
}

// -------------------------------------------------------------------

// CreateBranchRequest

// .erepro.api.branches.v1.Branch branch = 1;
inline bool CreateBranchRequest::has_branch() const {
  return this != internal_default_instance() && branch_ != NULL;
}
inline void CreateBranchRequest::clear_branch() {
  if (GetArenaNoVirtual() == NULL && branch_ != NULL) {
    delete branch_;
  }
  branch_ = NULL;
}
inline const ::erepro::api::branches::v1::Branch& CreateBranchRequest::_internal_branch() const {
  return *branch_;
}
inline const ::erepro::api::branches::v1::Branch& CreateBranchRequest::branch() const {
  const ::erepro::api::branches::v1::Branch* p = branch_;
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.CreateBranchRequest.branch)
  return p != NULL ? *p : *reinterpret_cast<const ::erepro::api::branches::v1::Branch*>(
      &::erepro::api::branches::v1::_Branch_default_instance_);
}
inline ::erepro::api::branches::v1::Branch* CreateBranchRequest::release_branch() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.CreateBranchRequest.branch)
  
  ::erepro::api::branches::v1::Branch* temp = branch_;
  branch_ = NULL;
  return temp;
}
inline ::erepro::api::branches::v1::Branch* CreateBranchRequest::mutable_branch() {
  
  if (branch_ == NULL) {
    auto* p = CreateMaybeMessage<::erepro::api::branches::v1::Branch>(GetArenaNoVirtual());
    branch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.CreateBranchRequest.branch)
  return branch_;
}
inline void CreateBranchRequest::set_allocated_branch(::erepro::api::branches::v1::Branch* branch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete branch_;
  }
  if (branch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      branch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, branch, submessage_arena);
    }
    
  } else {
    
  }
  branch_ = branch;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.CreateBranchRequest.branch)
}

// -------------------------------------------------------------------

// UpdateBranchRequest

// .erepro.api.branches.v1.Branch branch = 1;
inline bool UpdateBranchRequest::has_branch() const {
  return this != internal_default_instance() && branch_ != NULL;
}
inline void UpdateBranchRequest::clear_branch() {
  if (GetArenaNoVirtual() == NULL && branch_ != NULL) {
    delete branch_;
  }
  branch_ = NULL;
}
inline const ::erepro::api::branches::v1::Branch& UpdateBranchRequest::_internal_branch() const {
  return *branch_;
}
inline const ::erepro::api::branches::v1::Branch& UpdateBranchRequest::branch() const {
  const ::erepro::api::branches::v1::Branch* p = branch_;
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.UpdateBranchRequest.branch)
  return p != NULL ? *p : *reinterpret_cast<const ::erepro::api::branches::v1::Branch*>(
      &::erepro::api::branches::v1::_Branch_default_instance_);
}
inline ::erepro::api::branches::v1::Branch* UpdateBranchRequest::release_branch() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.UpdateBranchRequest.branch)
  
  ::erepro::api::branches::v1::Branch* temp = branch_;
  branch_ = NULL;
  return temp;
}
inline ::erepro::api::branches::v1::Branch* UpdateBranchRequest::mutable_branch() {
  
  if (branch_ == NULL) {
    auto* p = CreateMaybeMessage<::erepro::api::branches::v1::Branch>(GetArenaNoVirtual());
    branch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.UpdateBranchRequest.branch)
  return branch_;
}
inline void UpdateBranchRequest::set_allocated_branch(::erepro::api::branches::v1::Branch* branch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete branch_;
  }
  if (branch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      branch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, branch, submessage_arena);
    }
    
  } else {
    
  }
  branch_ = branch;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.UpdateBranchRequest.branch)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateBranchRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateBranchRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateBranchRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.UpdateBranchRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateBranchRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:erepro.api.branches.v1.UpdateBranchRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateBranchRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.branches.v1.UpdateBranchRequest.update_mask)
  return update_mask_;
}
inline void UpdateBranchRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.branches.v1.UpdateBranchRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteBranchRequest

// uint64 id = 1;
inline void DeleteBranchRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeleteBranchRequest::id() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.DeleteBranchRequest.id)
  return id_;
}
inline void DeleteBranchRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.DeleteBranchRequest.id)
}

// -------------------------------------------------------------------

// BrancheOperation

// uint64 id = 1;
inline void BrancheOperation::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BrancheOperation::id() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.BrancheOperation.id)
  return id_;
}
inline void BrancheOperation::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.BrancheOperation.id)
}

// .erepro.api.branches.v1.BrancheOperation.OperationType operation_type = 2;
inline void BrancheOperation::clear_operation_type() {
  operation_type_ = 0;
}
inline ::erepro::api::branches::v1::BrancheOperation_OperationType BrancheOperation::operation_type() const {
  // @@protoc_insertion_point(field_get:erepro.api.branches.v1.BrancheOperation.operation_type)
  return static_cast< ::erepro::api::branches::v1::BrancheOperation_OperationType >(operation_type_);
}
inline void BrancheOperation::set_operation_type(::erepro::api::branches::v1::BrancheOperation_OperationType value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.branches.v1.BrancheOperation.operation_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace branches
}  // namespace api
}  // namespace erepro

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::erepro::api::branches::v1::BrancheOperation_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::erepro::api::branches::v1::BrancheOperation_OperationType>() {
  return ::erepro::api::branches::v1::BrancheOperation_OperationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2fbranches_2fv1_2fbranches_2eproto
