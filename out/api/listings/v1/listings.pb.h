// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/listings/v1/listings.proto

#ifndef PROTOBUF_INCLUDED_api_2flistings_2fv1_2flistings_2eproto
#define PROTOBUF_INCLUDED_api_2flistings_2fv1_2flistings_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/field_mask.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_api_2flistings_2fv1_2flistings_2eproto 

namespace protobuf_api_2flistings_2fv1_2flistings_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_api_2flistings_2fv1_2flistings_2eproto
namespace erepro {
namespace api {
namespace listings {
namespace v1 {
class CreateListingRequest;
class CreateListingRequestDefaultTypeInternal;
extern CreateListingRequestDefaultTypeInternal _CreateListingRequest_default_instance_;
class DeleteListingRequest;
class DeleteListingRequestDefaultTypeInternal;
extern DeleteListingRequestDefaultTypeInternal _DeleteListingRequest_default_instance_;
class GetListingRequest;
class GetListingRequestDefaultTypeInternal;
extern GetListingRequestDefaultTypeInternal _GetListingRequest_default_instance_;
class ListListingsRequest;
class ListListingsRequestDefaultTypeInternal;
extern ListListingsRequestDefaultTypeInternal _ListListingsRequest_default_instance_;
class ListListingsResponse;
class ListListingsResponseDefaultTypeInternal;
extern ListListingsResponseDefaultTypeInternal _ListListingsResponse_default_instance_;
class Listing;
class ListingDefaultTypeInternal;
extern ListingDefaultTypeInternal _Listing_default_instance_;
class ListingOperation;
class ListingOperationDefaultTypeInternal;
extern ListingOperationDefaultTypeInternal _ListingOperation_default_instance_;
class SearchListingsRequest;
class SearchListingsRequestDefaultTypeInternal;
extern SearchListingsRequestDefaultTypeInternal _SearchListingsRequest_default_instance_;
class SearchListingsResponse;
class SearchListingsResponseDefaultTypeInternal;
extern SearchListingsResponseDefaultTypeInternal _SearchListingsResponse_default_instance_;
class UpdateListingRequest;
class UpdateListingRequestDefaultTypeInternal;
extern UpdateListingRequestDefaultTypeInternal _UpdateListingRequest_default_instance_;
}  // namespace v1
}  // namespace listings
}  // namespace api
}  // namespace erepro
namespace google {
namespace protobuf {
template<> ::erepro::api::listings::v1::CreateListingRequest* Arena::CreateMaybeMessage<::erepro::api::listings::v1::CreateListingRequest>(Arena*);
template<> ::erepro::api::listings::v1::DeleteListingRequest* Arena::CreateMaybeMessage<::erepro::api::listings::v1::DeleteListingRequest>(Arena*);
template<> ::erepro::api::listings::v1::GetListingRequest* Arena::CreateMaybeMessage<::erepro::api::listings::v1::GetListingRequest>(Arena*);
template<> ::erepro::api::listings::v1::ListListingsRequest* Arena::CreateMaybeMessage<::erepro::api::listings::v1::ListListingsRequest>(Arena*);
template<> ::erepro::api::listings::v1::ListListingsResponse* Arena::CreateMaybeMessage<::erepro::api::listings::v1::ListListingsResponse>(Arena*);
template<> ::erepro::api::listings::v1::Listing* Arena::CreateMaybeMessage<::erepro::api::listings::v1::Listing>(Arena*);
template<> ::erepro::api::listings::v1::ListingOperation* Arena::CreateMaybeMessage<::erepro::api::listings::v1::ListingOperation>(Arena*);
template<> ::erepro::api::listings::v1::SearchListingsRequest* Arena::CreateMaybeMessage<::erepro::api::listings::v1::SearchListingsRequest>(Arena*);
template<> ::erepro::api::listings::v1::SearchListingsResponse* Arena::CreateMaybeMessage<::erepro::api::listings::v1::SearchListingsResponse>(Arena*);
template<> ::erepro::api::listings::v1::UpdateListingRequest* Arena::CreateMaybeMessage<::erepro::api::listings::v1::UpdateListingRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace erepro {
namespace api {
namespace listings {
namespace v1 {

enum Listing_Status {
  Listing_Status_UNSPECIFIED = 0,
  Listing_Status_ACTIVE = 1,
  Listing_Status_SOLD = 2,
  Listing_Status_RENTED = 3,
  Listing_Status_Listing_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Listing_Status_Listing_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Listing_Status_IsValid(int value);
const Listing_Status Listing_Status_Status_MIN = Listing_Status_UNSPECIFIED;
const Listing_Status Listing_Status_Status_MAX = Listing_Status_RENTED;
const int Listing_Status_Status_ARRAYSIZE = Listing_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Listing_Status_descriptor();
inline const ::std::string& Listing_Status_Name(Listing_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Listing_Status_descriptor(), value);
}
inline bool Listing_Status_Parse(
    const ::std::string& name, Listing_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Listing_Status>(
    Listing_Status_descriptor(), name, value);
}
enum ListingOperation_OperationType {
  ListingOperation_OperationType_OPERATION_TYPE_UNSPECIFIED = 0,
  ListingOperation_OperationType_CREATE = 1,
  ListingOperation_OperationType_ListingOperation_OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ListingOperation_OperationType_ListingOperation_OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ListingOperation_OperationType_IsValid(int value);
const ListingOperation_OperationType ListingOperation_OperationType_OperationType_MIN = ListingOperation_OperationType_OPERATION_TYPE_UNSPECIFIED;
const ListingOperation_OperationType ListingOperation_OperationType_OperationType_MAX = ListingOperation_OperationType_CREATE;
const int ListingOperation_OperationType_OperationType_ARRAYSIZE = ListingOperation_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ListingOperation_OperationType_descriptor();
inline const ::std::string& ListingOperation_OperationType_Name(ListingOperation_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ListingOperation_OperationType_descriptor(), value);
}
inline bool ListingOperation_OperationType_Parse(
    const ::std::string& name, ListingOperation_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ListingOperation_OperationType>(
    ListingOperation_OperationType_descriptor(), name, value);
}
// ===================================================================

class Listing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.Listing) */ {
 public:
  Listing();
  virtual ~Listing();

  Listing(const Listing& from);

  inline Listing& operator=(const Listing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Listing(Listing&& from) noexcept
    : Listing() {
    *this = ::std::move(from);
  }

  inline Listing& operator=(Listing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Listing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Listing* internal_default_instance() {
    return reinterpret_cast<const Listing*>(
               &_Listing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Listing* other);
  friend void swap(Listing& a, Listing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Listing* New() const final {
    return CreateMaybeMessage<Listing>(NULL);
  }

  Listing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Listing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Listing& from);
  void MergeFrom(const Listing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Listing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Listing_Status Status;
  static const Status UNSPECIFIED =
    Listing_Status_UNSPECIFIED;
  static const Status ACTIVE =
    Listing_Status_ACTIVE;
  static const Status SOLD =
    Listing_Status_SOLD;
  static const Status RENTED =
    Listing_Status_RENTED;
  static inline bool Status_IsValid(int value) {
    return Listing_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Listing_Status_Status_MIN;
  static const Status Status_MAX =
    Listing_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Listing_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Listing_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Listing_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Listing_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string address = 3;
  void clear_address();
  static const int kAddressFieldNumber = 3;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .google.protobuf.Timestamp create_time = 7;
  bool has_create_time() const;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  public:
  const ::google::protobuf::Timestamp& create_time() const;
  ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* create_time);

  // .google.protobuf.Timestamp update_time = 8;
  bool has_update_time() const;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 8;
  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  public:
  const ::google::protobuf::Timestamp& update_time() const;
  ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* update_time);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 no_beds = 4;
  void clear_no_beds();
  static const int kNoBedsFieldNumber = 4;
  ::google::protobuf::uint32 no_beds() const;
  void set_no_beds(::google::protobuf::uint32 value);

  // uint32 no_baths = 5;
  void clear_no_baths();
  static const int kNoBathsFieldNumber = 5;
  ::google::protobuf::uint32 no_baths() const;
  void set_no_baths(::google::protobuf::uint32 value);

  // uint64 price = 6;
  void clear_price();
  static const int kPriceFieldNumber = 6;
  ::google::protobuf::uint64 price() const;
  void set_price(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.Listing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::Timestamp* create_time_;
  ::google::protobuf::Timestamp* update_time_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 no_beds_;
  ::google::protobuf::uint32 no_baths_;
  ::google::protobuf::uint64 price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListListingsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.ListListingsRequest) */ {
 public:
  ListListingsRequest();
  virtual ~ListListingsRequest();

  ListListingsRequest(const ListListingsRequest& from);

  inline ListListingsRequest& operator=(const ListListingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListListingsRequest(ListListingsRequest&& from) noexcept
    : ListListingsRequest() {
    *this = ::std::move(from);
  }

  inline ListListingsRequest& operator=(ListListingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListListingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListListingsRequest* internal_default_instance() {
    return reinterpret_cast<const ListListingsRequest*>(
               &_ListListingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ListListingsRequest* other);
  friend void swap(ListListingsRequest& a, ListListingsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListListingsRequest* New() const final {
    return CreateMaybeMessage<ListListingsRequest>(NULL);
  }

  ListListingsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListListingsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListListingsRequest& from);
  void MergeFrom(const ListListingsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListListingsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 1;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 1;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // bool show_delete = 3;
  void clear_show_delete();
  static const int kShowDeleteFieldNumber = 3;
  bool show_delete() const;
  void set_show_delete(bool value);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.ListListingsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  bool show_delete_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListListingsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.ListListingsResponse) */ {
 public:
  ListListingsResponse();
  virtual ~ListListingsResponse();

  ListListingsResponse(const ListListingsResponse& from);

  inline ListListingsResponse& operator=(const ListListingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListListingsResponse(ListListingsResponse&& from) noexcept
    : ListListingsResponse() {
    *this = ::std::move(from);
  }

  inline ListListingsResponse& operator=(ListListingsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListListingsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListListingsResponse* internal_default_instance() {
    return reinterpret_cast<const ListListingsResponse*>(
               &_ListListingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ListListingsResponse* other);
  friend void swap(ListListingsResponse& a, ListListingsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListListingsResponse* New() const final {
    return CreateMaybeMessage<ListListingsResponse>(NULL);
  }

  ListListingsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListListingsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListListingsResponse& from);
  void MergeFrom(const ListListingsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListListingsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .erepro.api.listings.v1.Listing listings = 1;
  int listings_size() const;
  void clear_listings();
  static const int kListingsFieldNumber = 1;
  ::erepro::api::listings::v1::Listing* mutable_listings(int index);
  ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing >*
      mutable_listings();
  const ::erepro::api::listings::v1::Listing& listings(int index) const;
  ::erepro::api::listings::v1::Listing* add_listings();
  const ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing >&
      listings() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.ListListingsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing > listings_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchListingsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.SearchListingsRequest) */ {
 public:
  SearchListingsRequest();
  virtual ~SearchListingsRequest();

  SearchListingsRequest(const SearchListingsRequest& from);

  inline SearchListingsRequest& operator=(const SearchListingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchListingsRequest(SearchListingsRequest&& from) noexcept
    : SearchListingsRequest() {
    *this = ::std::move(from);
  }

  inline SearchListingsRequest& operator=(SearchListingsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchListingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchListingsRequest* internal_default_instance() {
    return reinterpret_cast<const SearchListingsRequest*>(
               &_SearchListingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SearchListingsRequest* other);
  friend void swap(SearchListingsRequest& a, SearchListingsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchListingsRequest* New() const final {
    return CreateMaybeMessage<SearchListingsRequest>(NULL);
  }

  SearchListingsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchListingsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchListingsRequest& from);
  void MergeFrom(const SearchListingsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchListingsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 2;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 2;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string query = 3;
  void clear_query();
  static const int kQueryFieldNumber = 3;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // int32 page_size = 1;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 1;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.SearchListingsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchListingsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.SearchListingsResponse) */ {
 public:
  SearchListingsResponse();
  virtual ~SearchListingsResponse();

  SearchListingsResponse(const SearchListingsResponse& from);

  inline SearchListingsResponse& operator=(const SearchListingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchListingsResponse(SearchListingsResponse&& from) noexcept
    : SearchListingsResponse() {
    *this = ::std::move(from);
  }

  inline SearchListingsResponse& operator=(SearchListingsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchListingsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchListingsResponse* internal_default_instance() {
    return reinterpret_cast<const SearchListingsResponse*>(
               &_SearchListingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SearchListingsResponse* other);
  friend void swap(SearchListingsResponse& a, SearchListingsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchListingsResponse* New() const final {
    return CreateMaybeMessage<SearchListingsResponse>(NULL);
  }

  SearchListingsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SearchListingsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SearchListingsResponse& from);
  void MergeFrom(const SearchListingsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchListingsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .erepro.api.listings.v1.Listing listings = 1;
  int listings_size() const;
  void clear_listings();
  static const int kListingsFieldNumber = 1;
  ::erepro::api::listings::v1::Listing* mutable_listings(int index);
  ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing >*
      mutable_listings();
  const ::erepro::api::listings::v1::Listing& listings(int index) const;
  ::erepro::api::listings::v1::Listing* add_listings();
  const ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing >&
      listings() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.SearchListingsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing > listings_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetListingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.GetListingRequest) */ {
 public:
  GetListingRequest();
  virtual ~GetListingRequest();

  GetListingRequest(const GetListingRequest& from);

  inline GetListingRequest& operator=(const GetListingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetListingRequest(GetListingRequest&& from) noexcept
    : GetListingRequest() {
    *this = ::std::move(from);
  }

  inline GetListingRequest& operator=(GetListingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetListingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetListingRequest* internal_default_instance() {
    return reinterpret_cast<const GetListingRequest*>(
               &_GetListingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetListingRequest* other);
  friend void swap(GetListingRequest& a, GetListingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetListingRequest* New() const final {
    return CreateMaybeMessage<GetListingRequest>(NULL);
  }

  GetListingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetListingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetListingRequest& from);
  void MergeFrom(const GetListingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetListingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.GetListingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateListingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.CreateListingRequest) */ {
 public:
  CreateListingRequest();
  virtual ~CreateListingRequest();

  CreateListingRequest(const CreateListingRequest& from);

  inline CreateListingRequest& operator=(const CreateListingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateListingRequest(CreateListingRequest&& from) noexcept
    : CreateListingRequest() {
    *this = ::std::move(from);
  }

  inline CreateListingRequest& operator=(CreateListingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateListingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateListingRequest* internal_default_instance() {
    return reinterpret_cast<const CreateListingRequest*>(
               &_CreateListingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CreateListingRequest* other);
  friend void swap(CreateListingRequest& a, CreateListingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateListingRequest* New() const final {
    return CreateMaybeMessage<CreateListingRequest>(NULL);
  }

  CreateListingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateListingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateListingRequest& from);
  void MergeFrom(const CreateListingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateListingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .erepro.api.listings.v1.Listing listing = 1;
  bool has_listing() const;
  void clear_listing();
  static const int kListingFieldNumber = 1;
  private:
  const ::erepro::api::listings::v1::Listing& _internal_listing() const;
  public:
  const ::erepro::api::listings::v1::Listing& listing() const;
  ::erepro::api::listings::v1::Listing* release_listing();
  ::erepro::api::listings::v1::Listing* mutable_listing();
  void set_allocated_listing(::erepro::api::listings::v1::Listing* listing);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.CreateListingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::erepro::api::listings::v1::Listing* listing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateListingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.UpdateListingRequest) */ {
 public:
  UpdateListingRequest();
  virtual ~UpdateListingRequest();

  UpdateListingRequest(const UpdateListingRequest& from);

  inline UpdateListingRequest& operator=(const UpdateListingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateListingRequest(UpdateListingRequest&& from) noexcept
    : UpdateListingRequest() {
    *this = ::std::move(from);
  }

  inline UpdateListingRequest& operator=(UpdateListingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateListingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateListingRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateListingRequest*>(
               &_UpdateListingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(UpdateListingRequest* other);
  friend void swap(UpdateListingRequest& a, UpdateListingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateListingRequest* New() const final {
    return CreateMaybeMessage<UpdateListingRequest>(NULL);
  }

  UpdateListingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateListingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateListingRequest& from);
  void MergeFrom(const UpdateListingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateListingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .erepro.api.listings.v1.Listing listing = 1;
  bool has_listing() const;
  void clear_listing();
  static const int kListingFieldNumber = 1;
  private:
  const ::erepro::api::listings::v1::Listing& _internal_listing() const;
  public:
  const ::erepro::api::listings::v1::Listing& listing() const;
  ::erepro::api::listings::v1::Listing* release_listing();
  ::erepro::api::listings::v1::Listing* mutable_listing();
  void set_allocated_listing(::erepro::api::listings::v1::Listing* listing);

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  const ::google::protobuf::FieldMask& _internal_update_mask() const;
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.UpdateListingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::erepro::api::listings::v1::Listing* listing_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteListingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.DeleteListingRequest) */ {
 public:
  DeleteListingRequest();
  virtual ~DeleteListingRequest();

  DeleteListingRequest(const DeleteListingRequest& from);

  inline DeleteListingRequest& operator=(const DeleteListingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteListingRequest(DeleteListingRequest&& from) noexcept
    : DeleteListingRequest() {
    *this = ::std::move(from);
  }

  inline DeleteListingRequest& operator=(DeleteListingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteListingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteListingRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteListingRequest*>(
               &_DeleteListingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteListingRequest* other);
  friend void swap(DeleteListingRequest& a, DeleteListingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteListingRequest* New() const final {
    return CreateMaybeMessage<DeleteListingRequest>(NULL);
  }

  DeleteListingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteListingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteListingRequest& from);
  void MergeFrom(const DeleteListingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteListingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.DeleteListingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListingOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:erepro.api.listings.v1.ListingOperation) */ {
 public:
  ListingOperation();
  virtual ~ListingOperation();

  ListingOperation(const ListingOperation& from);

  inline ListingOperation& operator=(const ListingOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListingOperation(ListingOperation&& from) noexcept
    : ListingOperation() {
    *this = ::std::move(from);
  }

  inline ListingOperation& operator=(ListingOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListingOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListingOperation* internal_default_instance() {
    return reinterpret_cast<const ListingOperation*>(
               &_ListingOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ListingOperation* other);
  friend void swap(ListingOperation& a, ListingOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListingOperation* New() const final {
    return CreateMaybeMessage<ListingOperation>(NULL);
  }

  ListingOperation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListingOperation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListingOperation& from);
  void MergeFrom(const ListingOperation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListingOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListingOperation_OperationType OperationType;
  static const OperationType OPERATION_TYPE_UNSPECIFIED =
    ListingOperation_OperationType_OPERATION_TYPE_UNSPECIFIED;
  static const OperationType CREATE =
    ListingOperation_OperationType_CREATE;
  static inline bool OperationType_IsValid(int value) {
    return ListingOperation_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    ListingOperation_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    ListingOperation_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    ListingOperation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return ListingOperation_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return ListingOperation_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return ListingOperation_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // .erepro.api.listings.v1.ListingOperation.OperationType operation_type = 2;
  void clear_operation_type();
  static const int kOperationTypeFieldNumber = 2;
  ::erepro::api::listings::v1::ListingOperation_OperationType operation_type() const;
  void set_operation_type(::erepro::api::listings::v1::ListingOperation_OperationType value);

  // @@protoc_insertion_point(class_scope:erepro.api.listings.v1.ListingOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  int operation_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_api_2flistings_2fv1_2flistings_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Listing

// uint64 id = 1;
inline void Listing::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Listing::id() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.Listing.id)
  return id_;
}
inline void Listing::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.Listing.id)
}

// string name = 2;
inline void Listing::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Listing::name() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.Listing.name)
  return name_.GetNoArena();
}
inline void Listing::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.Listing.name)
}
#if LANG_CXX11
inline void Listing::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.listings.v1.Listing.name)
}
#endif
inline void Listing::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.listings.v1.Listing.name)
}
inline void Listing::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.listings.v1.Listing.name)
}
inline ::std::string* Listing::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.Listing.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Listing::release_name() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.Listing.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Listing::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.Listing.name)
}

// string address = 3;
inline void Listing::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Listing::address() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.Listing.address)
  return address_.GetNoArena();
}
inline void Listing::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.Listing.address)
}
#if LANG_CXX11
inline void Listing::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.listings.v1.Listing.address)
}
#endif
inline void Listing::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.listings.v1.Listing.address)
}
inline void Listing::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.listings.v1.Listing.address)
}
inline ::std::string* Listing::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.Listing.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Listing::release_address() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.Listing.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Listing::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.Listing.address)
}

// uint32 no_beds = 4;
inline void Listing::clear_no_beds() {
  no_beds_ = 0u;
}
inline ::google::protobuf::uint32 Listing::no_beds() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.Listing.no_beds)
  return no_beds_;
}
inline void Listing::set_no_beds(::google::protobuf::uint32 value) {
  
  no_beds_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.Listing.no_beds)
}

// uint32 no_baths = 5;
inline void Listing::clear_no_baths() {
  no_baths_ = 0u;
}
inline ::google::protobuf::uint32 Listing::no_baths() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.Listing.no_baths)
  return no_baths_;
}
inline void Listing::set_no_baths(::google::protobuf::uint32 value) {
  
  no_baths_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.Listing.no_baths)
}

// uint64 price = 6;
inline void Listing::clear_price() {
  price_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Listing::price() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.Listing.price)
  return price_;
}
inline void Listing::set_price(::google::protobuf::uint64 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.Listing.price)
}

// .google.protobuf.Timestamp create_time = 7;
inline bool Listing::has_create_time() const {
  return this != internal_default_instance() && create_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Listing::_internal_create_time() const {
  return *create_time_;
}
inline const ::google::protobuf::Timestamp& Listing::create_time() const {
  const ::google::protobuf::Timestamp* p = create_time_;
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.Listing.create_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Listing::release_create_time() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.Listing.create_time)
  
  ::google::protobuf::Timestamp* temp = create_time_;
  create_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Listing::mutable_create_time() {
  
  if (create_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.Listing.create_time)
  return create_time_;
}
inline void Listing::set_allocated_create_time(::google::protobuf::Timestamp* create_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.Listing.create_time)
}

// .google.protobuf.Timestamp update_time = 8;
inline bool Listing::has_update_time() const {
  return this != internal_default_instance() && update_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Listing::_internal_update_time() const {
  return *update_time_;
}
inline const ::google::protobuf::Timestamp& Listing::update_time() const {
  const ::google::protobuf::Timestamp* p = update_time_;
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.Listing.update_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Listing::release_update_time() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.Listing.update_time)
  
  ::google::protobuf::Timestamp* temp = update_time_;
  update_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Listing::mutable_update_time() {
  
  if (update_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.Listing.update_time)
  return update_time_;
}
inline void Listing::set_allocated_update_time(::google::protobuf::Timestamp* update_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.Listing.update_time)
}

// -------------------------------------------------------------------

// ListListingsRequest

// int32 page_size = 1;
inline void ListListingsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListListingsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.ListListingsRequest.page_size)
  return page_size_;
}
inline void ListListingsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.ListListingsRequest.page_size)
}

// string page_token = 2;
inline void ListListingsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListListingsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.ListListingsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListListingsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.ListListingsRequest.page_token)
}
#if LANG_CXX11
inline void ListListingsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.listings.v1.ListListingsRequest.page_token)
}
#endif
inline void ListListingsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.listings.v1.ListListingsRequest.page_token)
}
inline void ListListingsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.listings.v1.ListListingsRequest.page_token)
}
inline ::std::string* ListListingsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.ListListingsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListListingsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.ListListingsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListListingsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.ListListingsRequest.page_token)
}

// bool show_delete = 3;
inline void ListListingsRequest::clear_show_delete() {
  show_delete_ = false;
}
inline bool ListListingsRequest::show_delete() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.ListListingsRequest.show_delete)
  return show_delete_;
}
inline void ListListingsRequest::set_show_delete(bool value) {
  
  show_delete_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.ListListingsRequest.show_delete)
}

// -------------------------------------------------------------------

// ListListingsResponse

// repeated .erepro.api.listings.v1.Listing listings = 1;
inline int ListListingsResponse::listings_size() const {
  return listings_.size();
}
inline void ListListingsResponse::clear_listings() {
  listings_.Clear();
}
inline ::erepro::api::listings::v1::Listing* ListListingsResponse::mutable_listings(int index) {
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.ListListingsResponse.listings)
  return listings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing >*
ListListingsResponse::mutable_listings() {
  // @@protoc_insertion_point(field_mutable_list:erepro.api.listings.v1.ListListingsResponse.listings)
  return &listings_;
}
inline const ::erepro::api::listings::v1::Listing& ListListingsResponse::listings(int index) const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.ListListingsResponse.listings)
  return listings_.Get(index);
}
inline ::erepro::api::listings::v1::Listing* ListListingsResponse::add_listings() {
  // @@protoc_insertion_point(field_add:erepro.api.listings.v1.ListListingsResponse.listings)
  return listings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing >&
ListListingsResponse::listings() const {
  // @@protoc_insertion_point(field_list:erepro.api.listings.v1.ListListingsResponse.listings)
  return listings_;
}

// string next_page_token = 2;
inline void ListListingsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListListingsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.ListListingsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListListingsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.ListListingsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListListingsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.listings.v1.ListListingsResponse.next_page_token)
}
#endif
inline void ListListingsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.listings.v1.ListListingsResponse.next_page_token)
}
inline void ListListingsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.listings.v1.ListListingsResponse.next_page_token)
}
inline ::std::string* ListListingsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.ListListingsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListListingsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.ListListingsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListListingsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.ListListingsResponse.next_page_token)
}

// -------------------------------------------------------------------

// SearchListingsRequest

// int32 page_size = 1;
inline void SearchListingsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 SearchListingsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.SearchListingsRequest.page_size)
  return page_size_;
}
inline void SearchListingsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.SearchListingsRequest.page_size)
}

// string page_token = 2;
inline void SearchListingsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchListingsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.SearchListingsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void SearchListingsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.SearchListingsRequest.page_token)
}
#if LANG_CXX11
inline void SearchListingsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.listings.v1.SearchListingsRequest.page_token)
}
#endif
inline void SearchListingsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.listings.v1.SearchListingsRequest.page_token)
}
inline void SearchListingsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.listings.v1.SearchListingsRequest.page_token)
}
inline ::std::string* SearchListingsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.SearchListingsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchListingsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.SearchListingsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchListingsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.SearchListingsRequest.page_token)
}

// string query = 3;
inline void SearchListingsRequest::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchListingsRequest::query() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.SearchListingsRequest.query)
  return query_.GetNoArena();
}
inline void SearchListingsRequest::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.SearchListingsRequest.query)
}
#if LANG_CXX11
inline void SearchListingsRequest::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.listings.v1.SearchListingsRequest.query)
}
#endif
inline void SearchListingsRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.listings.v1.SearchListingsRequest.query)
}
inline void SearchListingsRequest::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.listings.v1.SearchListingsRequest.query)
}
inline ::std::string* SearchListingsRequest::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.SearchListingsRequest.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchListingsRequest::release_query() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.SearchListingsRequest.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchListingsRequest::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.SearchListingsRequest.query)
}

// -------------------------------------------------------------------

// SearchListingsResponse

// repeated .erepro.api.listings.v1.Listing listings = 1;
inline int SearchListingsResponse::listings_size() const {
  return listings_.size();
}
inline void SearchListingsResponse::clear_listings() {
  listings_.Clear();
}
inline ::erepro::api::listings::v1::Listing* SearchListingsResponse::mutable_listings(int index) {
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.SearchListingsResponse.listings)
  return listings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing >*
SearchListingsResponse::mutable_listings() {
  // @@protoc_insertion_point(field_mutable_list:erepro.api.listings.v1.SearchListingsResponse.listings)
  return &listings_;
}
inline const ::erepro::api::listings::v1::Listing& SearchListingsResponse::listings(int index) const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.SearchListingsResponse.listings)
  return listings_.Get(index);
}
inline ::erepro::api::listings::v1::Listing* SearchListingsResponse::add_listings() {
  // @@protoc_insertion_point(field_add:erepro.api.listings.v1.SearchListingsResponse.listings)
  return listings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::erepro::api::listings::v1::Listing >&
SearchListingsResponse::listings() const {
  // @@protoc_insertion_point(field_list:erepro.api.listings.v1.SearchListingsResponse.listings)
  return listings_;
}

// string next_page_token = 2;
inline void SearchListingsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchListingsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.SearchListingsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void SearchListingsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.SearchListingsResponse.next_page_token)
}
#if LANG_CXX11
inline void SearchListingsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:erepro.api.listings.v1.SearchListingsResponse.next_page_token)
}
#endif
inline void SearchListingsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:erepro.api.listings.v1.SearchListingsResponse.next_page_token)
}
inline void SearchListingsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:erepro.api.listings.v1.SearchListingsResponse.next_page_token)
}
inline ::std::string* SearchListingsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.SearchListingsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchListingsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.SearchListingsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchListingsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.SearchListingsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetListingRequest

// uint64 id = 1;
inline void GetListingRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetListingRequest::id() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.GetListingRequest.id)
  return id_;
}
inline void GetListingRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.GetListingRequest.id)
}

// -------------------------------------------------------------------

// CreateListingRequest

// .erepro.api.listings.v1.Listing listing = 1;
inline bool CreateListingRequest::has_listing() const {
  return this != internal_default_instance() && listing_ != NULL;
}
inline void CreateListingRequest::clear_listing() {
  if (GetArenaNoVirtual() == NULL && listing_ != NULL) {
    delete listing_;
  }
  listing_ = NULL;
}
inline const ::erepro::api::listings::v1::Listing& CreateListingRequest::_internal_listing() const {
  return *listing_;
}
inline const ::erepro::api::listings::v1::Listing& CreateListingRequest::listing() const {
  const ::erepro::api::listings::v1::Listing* p = listing_;
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.CreateListingRequest.listing)
  return p != NULL ? *p : *reinterpret_cast<const ::erepro::api::listings::v1::Listing*>(
      &::erepro::api::listings::v1::_Listing_default_instance_);
}
inline ::erepro::api::listings::v1::Listing* CreateListingRequest::release_listing() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.CreateListingRequest.listing)
  
  ::erepro::api::listings::v1::Listing* temp = listing_;
  listing_ = NULL;
  return temp;
}
inline ::erepro::api::listings::v1::Listing* CreateListingRequest::mutable_listing() {
  
  if (listing_ == NULL) {
    auto* p = CreateMaybeMessage<::erepro::api::listings::v1::Listing>(GetArenaNoVirtual());
    listing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.CreateListingRequest.listing)
  return listing_;
}
inline void CreateListingRequest::set_allocated_listing(::erepro::api::listings::v1::Listing* listing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listing_;
  }
  if (listing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listing, submessage_arena);
    }
    
  } else {
    
  }
  listing_ = listing;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.CreateListingRequest.listing)
}

// -------------------------------------------------------------------

// UpdateListingRequest

// .erepro.api.listings.v1.Listing listing = 1;
inline bool UpdateListingRequest::has_listing() const {
  return this != internal_default_instance() && listing_ != NULL;
}
inline void UpdateListingRequest::clear_listing() {
  if (GetArenaNoVirtual() == NULL && listing_ != NULL) {
    delete listing_;
  }
  listing_ = NULL;
}
inline const ::erepro::api::listings::v1::Listing& UpdateListingRequest::_internal_listing() const {
  return *listing_;
}
inline const ::erepro::api::listings::v1::Listing& UpdateListingRequest::listing() const {
  const ::erepro::api::listings::v1::Listing* p = listing_;
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.UpdateListingRequest.listing)
  return p != NULL ? *p : *reinterpret_cast<const ::erepro::api::listings::v1::Listing*>(
      &::erepro::api::listings::v1::_Listing_default_instance_);
}
inline ::erepro::api::listings::v1::Listing* UpdateListingRequest::release_listing() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.UpdateListingRequest.listing)
  
  ::erepro::api::listings::v1::Listing* temp = listing_;
  listing_ = NULL;
  return temp;
}
inline ::erepro::api::listings::v1::Listing* UpdateListingRequest::mutable_listing() {
  
  if (listing_ == NULL) {
    auto* p = CreateMaybeMessage<::erepro::api::listings::v1::Listing>(GetArenaNoVirtual());
    listing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.UpdateListingRequest.listing)
  return listing_;
}
inline void UpdateListingRequest::set_allocated_listing(::erepro::api::listings::v1::Listing* listing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listing_;
  }
  if (listing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listing, submessage_arena);
    }
    
  } else {
    
  }
  listing_ = listing;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.UpdateListingRequest.listing)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateListingRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateListingRequest::_internal_update_mask() const {
  return *update_mask_;
}
inline const ::google::protobuf::FieldMask& UpdateListingRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.UpdateListingRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateListingRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:erepro.api.listings.v1.UpdateListingRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateListingRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  // @@protoc_insertion_point(field_mutable:erepro.api.listings.v1.UpdateListingRequest.update_mask)
  return update_mask_;
}
inline void UpdateListingRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:erepro.api.listings.v1.UpdateListingRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteListingRequest

// uint64 id = 1;
inline void DeleteListingRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DeleteListingRequest::id() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.DeleteListingRequest.id)
  return id_;
}
inline void DeleteListingRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.DeleteListingRequest.id)
}

// -------------------------------------------------------------------

// ListingOperation

// uint64 id = 1;
inline void ListingOperation::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ListingOperation::id() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.ListingOperation.id)
  return id_;
}
inline void ListingOperation::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.ListingOperation.id)
}

// .erepro.api.listings.v1.ListingOperation.OperationType operation_type = 2;
inline void ListingOperation::clear_operation_type() {
  operation_type_ = 0;
}
inline ::erepro::api::listings::v1::ListingOperation_OperationType ListingOperation::operation_type() const {
  // @@protoc_insertion_point(field_get:erepro.api.listings.v1.ListingOperation.operation_type)
  return static_cast< ::erepro::api::listings::v1::ListingOperation_OperationType >(operation_type_);
}
inline void ListingOperation::set_operation_type(::erepro::api::listings::v1::ListingOperation_OperationType value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:erepro.api.listings.v1.ListingOperation.operation_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace listings
}  // namespace api
}  // namespace erepro

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::erepro::api::listings::v1::Listing_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::erepro::api::listings::v1::Listing_Status>() {
  return ::erepro::api::listings::v1::Listing_Status_descriptor();
}
template <> struct is_proto_enum< ::erepro::api::listings::v1::ListingOperation_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::erepro::api::listings::v1::ListingOperation_OperationType>() {
  return ::erepro::api::listings::v1::ListingOperation_OperationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_api_2flistings_2fv1_2flistings_2eproto
