// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: erepro/api/auth/v1/auth.proto

#include "erepro/api/auth/v1/auth.pb.h"
#include "erepro/api/auth/v1/auth.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace erego {
namespace api {
namespace auth {
namespace v1 {

static const char* Auth_method_names[] = {
  "/erego.api.auth.v1.Auth/Authenticate",
};

std::unique_ptr< Auth::Stub> Auth::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Auth::Stub> stub(new Auth::Stub(channel));
  return stub;
}

Auth::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Authenticate_(Auth_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Auth::Stub::Authenticate(::grpc::ClientContext* context, const ::erego::api::auth::v1::AuthRequest& request, ::erego::api::auth::v1::AuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Authenticate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::erego::api::auth::v1::AuthResponse>* Auth::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::erego::api::auth::v1::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::erego::api::auth::v1::AuthResponse>::Create(channel_.get(), cq, rpcmethod_Authenticate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::erego::api::auth::v1::AuthResponse>* Auth::Stub::PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::erego::api::auth::v1::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::erego::api::auth::v1::AuthResponse>::Create(channel_.get(), cq, rpcmethod_Authenticate_, context, request, false);
}

Auth::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Auth_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Auth::Service, ::erego::api::auth::v1::AuthRequest, ::erego::api::auth::v1::AuthResponse>(
          std::mem_fn(&Auth::Service::Authenticate), this)));
}

Auth::Service::~Service() {
}

::grpc::Status Auth::Service::Authenticate(::grpc::ServerContext* context, const ::erego::api::auth::v1::AuthRequest* request, ::erego::api::auth::v1::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace erego
}  // namespace api
}  // namespace auth
}  // namespace v1

