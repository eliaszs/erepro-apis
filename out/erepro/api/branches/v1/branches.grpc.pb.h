// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: erepro/api/branches/v1/branches.proto
#ifndef GRPC_erepro_2fapi_2fbranches_2fv1_2fbranches_2eproto__INCLUDED
#define GRPC_erepro_2fapi_2fbranches_2fv1_2fbranches_2eproto__INCLUDED

#include "erepro/api/branches/v1/branches.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace erepro {
namespace api {
namespace branches {
namespace v1 {

// Manages cloud branch resources.
class Branches final {
 public:
  static constexpr char const* service_full_name() {
    return "erepro.api.branches.v1.Branches";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // List the availalbe Branches
    virtual ::grpc::Status ListBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::erepro::api::branches::v1::ListBranchesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::ListBranchesResponse>> AsyncListBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::ListBranchesResponse>>(AsyncListBranchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::ListBranchesResponse>> PrepareAsyncListBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::ListBranchesResponse>>(PrepareAsyncListBranchesRaw(context, request, cq));
    }
    // Search for Branches that match specific filter criteria.
    virtual ::grpc::Status SearchBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::erepro::api::branches::v1::SearchBranchesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::SearchBranchesResponse>> AsyncSearchBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::SearchBranchesResponse>>(AsyncSearchBranchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::SearchBranchesResponse>> PrepareAsyncSearchBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::SearchBranchesResponse>>(PrepareAsyncSearchBranchesRaw(context, request, cq));
    }
    // Retrives a branch identified by the supplied branch name
    virtual ::grpc::Status GetBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::erepro::api::branches::v1::Branch* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>> AsyncGetBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>>(AsyncGetBranchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>> PrepareAsyncGetBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>>(PrepareAsyncGetBranchRaw(context, request, cq));
    }
    // Create a Branch in the database
    virtual ::grpc::Status CreateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateBranchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateBranchRaw(context, request, cq));
    }
    // Update a branch
    virtual ::grpc::Status UpdateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::erepro::api::branches::v1::Branch* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>> AsyncUpdateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>>(AsyncUpdateBranchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>> PrepareAsyncUpdateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>>(PrepareAsyncUpdateBranchRaw(context, request, cq));
    }
    // Delete a branch
    virtual ::grpc::Status DeleteBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::erepro::api::branches::v1::Branch* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>> AsyncDeleteBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>>(AsyncDeleteBranchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>> PrepareAsyncDeleteBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>>(PrepareAsyncDeleteBranchRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::ListBranchesResponse>* AsyncListBranchesRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::ListBranchesResponse>* PrepareAsyncListBranchesRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::SearchBranchesResponse>* AsyncSearchBranchesRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::SearchBranchesResponse>* PrepareAsyncSearchBranchesRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>* AsyncGetBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>* PrepareAsyncGetBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>* AsyncUpdateBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>* PrepareAsyncUpdateBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>* AsyncDeleteBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::erepro::api::branches::v1::Branch>* PrepareAsyncDeleteBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::erepro::api::branches::v1::ListBranchesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::ListBranchesResponse>> AsyncListBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::ListBranchesResponse>>(AsyncListBranchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::ListBranchesResponse>> PrepareAsyncListBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::ListBranchesResponse>>(PrepareAsyncListBranchesRaw(context, request, cq));
    }
    ::grpc::Status SearchBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::erepro::api::branches::v1::SearchBranchesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::SearchBranchesResponse>> AsyncSearchBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::SearchBranchesResponse>>(AsyncSearchBranchesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::SearchBranchesResponse>> PrepareAsyncSearchBranches(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::SearchBranchesResponse>>(PrepareAsyncSearchBranchesRaw(context, request, cq));
    }
    ::grpc::Status GetBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::erepro::api::branches::v1::Branch* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>> AsyncGetBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>>(AsyncGetBranchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>> PrepareAsyncGetBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>>(PrepareAsyncGetBranchRaw(context, request, cq));
    }
    ::grpc::Status CreateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateBranchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateBranchRaw(context, request, cq));
    }
    ::grpc::Status UpdateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::erepro::api::branches::v1::Branch* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>> AsyncUpdateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>>(AsyncUpdateBranchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>> PrepareAsyncUpdateBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>>(PrepareAsyncUpdateBranchRaw(context, request, cq));
    }
    ::grpc::Status DeleteBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::erepro::api::branches::v1::Branch* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>> AsyncDeleteBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>>(AsyncDeleteBranchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>> PrepareAsyncDeleteBranch(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>>(PrepareAsyncDeleteBranchRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::ListBranchesResponse>* AsyncListBranchesRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::ListBranchesResponse>* PrepareAsyncListBranchesRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::ListBranchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::SearchBranchesResponse>* AsyncSearchBranchesRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::SearchBranchesResponse>* PrepareAsyncSearchBranchesRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>* AsyncGetBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>* PrepareAsyncGetBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::GetBranchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::CreateBranchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>* AsyncUpdateBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>* PrepareAsyncUpdateBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>* AsyncDeleteBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::erepro::api::branches::v1::Branch>* PrepareAsyncDeleteBranchRaw(::grpc::ClientContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListBranches_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchBranches_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBranch_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateBranch_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateBranch_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteBranch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // List the availalbe Branches
    virtual ::grpc::Status ListBranches(::grpc::ServerContext* context, const ::erepro::api::branches::v1::ListBranchesRequest* request, ::erepro::api::branches::v1::ListBranchesResponse* response);
    // Search for Branches that match specific filter criteria.
    virtual ::grpc::Status SearchBranches(::grpc::ServerContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest* request, ::erepro::api::branches::v1::SearchBranchesResponse* response);
    // Retrives a branch identified by the supplied branch name
    virtual ::grpc::Status GetBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::GetBranchRequest* request, ::erepro::api::branches::v1::Branch* response);
    // Create a Branch in the database
    virtual ::grpc::Status CreateBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::CreateBranchRequest* request, ::google::longrunning::Operation* response);
    // Update a branch
    virtual ::grpc::Status UpdateBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest* request, ::erepro::api::branches::v1::Branch* response);
    // Delete a branch
    virtual ::grpc::Status DeleteBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest* request, ::erepro::api::branches::v1::Branch* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListBranches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListBranches() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListBranches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBranches(::grpc::ServerContext* context, const ::erepro::api::branches::v1::ListBranchesRequest* request, ::erepro::api::branches::v1::ListBranchesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListBranches(::grpc::ServerContext* context, ::erepro::api::branches::v1::ListBranchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::erepro::api::branches::v1::ListBranchesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchBranches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SearchBranches() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SearchBranches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchBranches(::grpc::ServerContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest* request, ::erepro::api::branches::v1::SearchBranchesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchBranches(::grpc::ServerContext* context, ::erepro::api::branches::v1::SearchBranchesRequest* request, ::grpc::ServerAsyncResponseWriter< ::erepro::api::branches::v1::SearchBranchesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetBranch() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::GetBranchRequest* request, ::erepro::api::branches::v1::Branch* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBranch(::grpc::ServerContext* context, ::erepro::api::branches::v1::GetBranchRequest* request, ::grpc::ServerAsyncResponseWriter< ::erepro::api::branches::v1::Branch>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateBranch() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::CreateBranchRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateBranch(::grpc::ServerContext* context, ::erepro::api::branches::v1::CreateBranchRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateBranch() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest* request, ::erepro::api::branches::v1::Branch* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateBranch(::grpc::ServerContext* context, ::erepro::api::branches::v1::UpdateBranchRequest* request, ::grpc::ServerAsyncResponseWriter< ::erepro::api::branches::v1::Branch>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteBranch() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest* request, ::erepro::api::branches::v1::Branch* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBranch(::grpc::ServerContext* context, ::erepro::api::branches::v1::DeleteBranchRequest* request, ::grpc::ServerAsyncResponseWriter< ::erepro::api::branches::v1::Branch>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListBranches<WithAsyncMethod_SearchBranches<WithAsyncMethod_GetBranch<WithAsyncMethod_CreateBranch<WithAsyncMethod_UpdateBranch<WithAsyncMethod_DeleteBranch<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListBranches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListBranches() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListBranches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListBranches(::grpc::ServerContext* context, const ::erepro::api::branches::v1::ListBranchesRequest* request, ::erepro::api::branches::v1::ListBranchesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchBranches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SearchBranches() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SearchBranches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchBranches(::grpc::ServerContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest* request, ::erepro::api::branches::v1::SearchBranchesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetBranch() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::GetBranchRequest* request, ::erepro::api::branches::v1::Branch* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateBranch() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::CreateBranchRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateBranch() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest* request, ::erepro::api::branches::v1::Branch* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteBranch() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest* request, ::erepro::api::branches::v1::Branch* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListBranches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListBranches() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::erepro::api::branches::v1::ListBranchesRequest, ::erepro::api::branches::v1::ListBranchesResponse>(std::bind(&WithStreamedUnaryMethod_ListBranches<BaseClass>::StreamedListBranches, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListBranches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListBranches(::grpc::ServerContext* context, const ::erepro::api::branches::v1::ListBranchesRequest* request, ::erepro::api::branches::v1::ListBranchesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListBranches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::erepro::api::branches::v1::ListBranchesRequest,::erepro::api::branches::v1::ListBranchesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchBranches : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SearchBranches() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::erepro::api::branches::v1::SearchBranchesRequest, ::erepro::api::branches::v1::SearchBranchesResponse>(std::bind(&WithStreamedUnaryMethod_SearchBranches<BaseClass>::StreamedSearchBranches, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchBranches() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchBranches(::grpc::ServerContext* context, const ::erepro::api::branches::v1::SearchBranchesRequest* request, ::erepro::api::branches::v1::SearchBranchesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchBranches(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::erepro::api::branches::v1::SearchBranchesRequest,::erepro::api::branches::v1::SearchBranchesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetBranch() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::erepro::api::branches::v1::GetBranchRequest, ::erepro::api::branches::v1::Branch>(std::bind(&WithStreamedUnaryMethod_GetBranch<BaseClass>::StreamedGetBranch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::GetBranchRequest* request, ::erepro::api::branches::v1::Branch* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBranch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::erepro::api::branches::v1::GetBranchRequest,::erepro::api::branches::v1::Branch>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateBranch() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::erepro::api::branches::v1::CreateBranchRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateBranch<BaseClass>::StreamedCreateBranch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::CreateBranchRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateBranch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::erepro::api::branches::v1::CreateBranchRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateBranch() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::erepro::api::branches::v1::UpdateBranchRequest, ::erepro::api::branches::v1::Branch>(std::bind(&WithStreamedUnaryMethod_UpdateBranch<BaseClass>::StreamedUpdateBranch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::UpdateBranchRequest* request, ::erepro::api::branches::v1::Branch* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateBranch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::erepro::api::branches::v1::UpdateBranchRequest,::erepro::api::branches::v1::Branch>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteBranch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteBranch() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::erepro::api::branches::v1::DeleteBranchRequest, ::erepro::api::branches::v1::Branch>(std::bind(&WithStreamedUnaryMethod_DeleteBranch<BaseClass>::StreamedDeleteBranch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteBranch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteBranch(::grpc::ServerContext* context, const ::erepro::api::branches::v1::DeleteBranchRequest* request, ::erepro::api::branches::v1::Branch* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteBranch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::erepro::api::branches::v1::DeleteBranchRequest,::erepro::api::branches::v1::Branch>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListBranches<WithStreamedUnaryMethod_SearchBranches<WithStreamedUnaryMethod_GetBranch<WithStreamedUnaryMethod_CreateBranch<WithStreamedUnaryMethod_UpdateBranch<WithStreamedUnaryMethod_DeleteBranch<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListBranches<WithStreamedUnaryMethod_SearchBranches<WithStreamedUnaryMethod_GetBranch<WithStreamedUnaryMethod_CreateBranch<WithStreamedUnaryMethod_UpdateBranch<WithStreamedUnaryMethod_DeleteBranch<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace branches
}  // namespace api
}  // namespace erepro


#endif  // GRPC_erepro_2fapi_2fbranches_2fv1_2fbranches_2eproto__INCLUDED
